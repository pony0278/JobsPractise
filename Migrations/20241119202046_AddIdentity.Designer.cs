// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaKing.Models;

#nullable disable

namespace PizzaKing.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241119202046_AddIdentity")]
    partial class AddIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PizzaKing.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTimeUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "真不错",
                            CreateTimeUTC = new DateTime(2024, 11, 19, 20, 20, 46, 742, DateTimeKind.Utc).AddTicks(1720),
                            Email = "noname1@hotmail.com",
                            Name = "阿莱克斯"
                        },
                        new
                        {
                            Id = 2,
                            Comments = "还是挺好吃的",
                            CreateTimeUTC = new DateTime(2024, 11, 19, 20, 20, 46, 742, DateTimeKind.Utc).AddTicks(1720),
                            Email = "noname2@hotmail.com",
                            Name = "莱克斯"
                        },
                        new
                        {
                            Id = 3,
                            Comments = "啥轮七八糟的",
                            CreateTimeUTC = new DateTime(2024, 11, 19, 20, 20, 46, 742, DateTimeKind.Utc).AddTicks(1720),
                            Email = "noname3@hotmail.com",
                            Name = "克斯"
                        },
                        new
                        {
                            Id = 4,
                            Comments = "厚切的才有嚼劲",
                            CreateTimeUTC = new DateTime(2024, 11, 19, 20, 20, 46, 742, DateTimeKind.Utc).AddTicks(1720),
                            Email = "noname4@hotmail.com",
                            Name = "克斯"
                        });
                });

            modelBuilder.Entity("PizzaKing.Models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LongDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/images/毛细.png",
                            IsInStock = false,
                            LongDescription = "真的全是香肠啊",
                            Name = "香肠披萨",
                            Price = 12m,
                            ShortDescription = "全是香肠"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/images/细.png",
                            IsInStock = true,
                            LongDescription = "蔬菜什锦还有大鱼大肉",
                            Name = "什锦披萨",
                            Price = 10m,
                            ShortDescription = "全都有"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/images/三细.png",
                            IsInStock = true,
                            LongDescription = "可以拉丝的奶酪披萨",
                            Name = "奶酪披萨",
                            Price = 11m,
                            ShortDescription = "浓浓的芝士奶酪"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "/images/二细.png",
                            IsInStock = false,
                            LongDescription = "意大利人的噩梦",
                            Name = "夏威夷披萨",
                            Price = 10m,
                            ShortDescription = "有菠萝"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "/images/二柱子.png",
                            IsInStock = false,
                            LongDescription = "全国人民的最爱",
                            Name = "小龙虾披萨",
                            Price = 11m,
                            ShortDescription = "麻辣小龙虾口味"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "/images/韭叶子.png",
                            IsInStock = true,
                            LongDescription = "瞎编的",
                            Name = "咸蛋黄虾仁披萨",
                            Price = 12m,
                            ShortDescription = "啥"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "/images/薄宽.png",
                            IsInStock = true,
                            LongDescription = "还是我瞎编的",
                            Name = "川式腊味披萨",
                            Price = 11m,
                            ShortDescription = "啥啥"
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "/images/大宽.png",
                            IsInStock = true,
                            LongDescription = "面上加面碳水爆炸",
                            Name = "螺狮粉披萨",
                            Price = 10m,
                            ShortDescription = "臭臭的披萨"
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "/images/荞麦棱子.png",
                            IsInStock = false,
                            LongDescription = "可能也不太正宗",
                            Name = "正宗意大利披萨",
                            Price = 15m,
                            ShortDescription = "薄低番茄口"
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "/images/一窝丝.png",
                            IsInStock = false,
                            LongDescription = "应该还不错吧",
                            Name = "好吃的披萨",
                            Price = 15m,
                            ShortDescription = "从必胜客打包来的"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
